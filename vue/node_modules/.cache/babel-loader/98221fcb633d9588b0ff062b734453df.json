{"remainingRequest":"/Users/liujiaming/Documents/LabPaperShare-main/vue/node_modules/babel-loader/lib/index.js!/Users/liujiaming/Documents/LabPaperShare-main/vue/src/utils/request.js","dependencies":[{"path":"/Users/liujiaming/Documents/LabPaperShare-main/vue/src/utils/request.js","mtime":1650803060043},{"path":"/Users/liujiaming/Documents/LabPaperShare-main/vue/node_modules/cache-loader/dist/cjs.js","mtime":1650090877579},{"path":"/Users/liujiaming/Documents/LabPaperShare-main/vue/node_modules/babel-loader/lib/index.js","mtime":1650090878161}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsKaW1wb3J0IHJvdXRlciBmcm9tICJAL3JvdXRlciI7CmltcG9ydCBjb25maWcgZnJvbSAiLi4vY29uZmlnIjsKdmFyIGJhc2VVcmwgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IGNvbmZpZy5iYXNlVXJsLmRldiA6IGNvbmZpZy5iYXNlVXJsLnBybzsKdmFyIHJlcXVlc3QgPSBheGlvcy5jcmVhdGUoewogIGJhc2VVUkw6ICIvYXBpIiwKICB0aW1lb3V0OiA1MDAwCn0pOyAvLyDor7fmsYLnmb3lkI3ljZXvvIzlpoLmnpzor7fmsYLlnKjnmb3lkI3ljZXph4zpnaLvvIzlsIbkuI3kvJrooqvmi6bmiKrmoKHpqozmnYPpmZAKCnZhciB3aGl0ZVVybHMgPSBbIi8iXTsgLy8gcmVxdWVzdCDmi6bmiKrlmagKLy8g5Y+v5Lul6Ieq6K+35rGC5Y+R6YCB5YmN5a+56K+35rGC5YGa5LiA5Lqb5aSE55CGCi8vIOavlOWmgue7n+S4gOWKoHRva2Vu77yM5a+56K+35rGC5Y+C5pWw57uf5LiA5Yqg5a+GCgpyZXF1ZXN0LmludGVyY2VwdG9ycy5yZXF1ZXN0LnVzZShmdW5jdGlvbiAoY29uZmlnKSB7CiAgY29uZmlnLmhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCc7IC8vIOWPluWHunNlc3Npb25TdG9yYWdl6YeM6Z2i57yT5a2Y55qE55So5oi35L+h5oGvCgogIHZhciB1c2VySnNvbiA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oInVzZXIiKTsKCiAgaWYgKCF3aGl0ZVVybHMuaW5jbHVkZXMoY29uZmlnLnVybCkpIHsKICAgIC8vIOagoemqjOivt+axgueZveWQjeWNlQogICAgaWYgKCF1c2VySnNvbikgewogICAgICByb3V0ZXIucHVzaCgiL2xvZ2luIik7CiAgICB9IGVsc2UgewogICAgICB2YXIgdXNlciA9IEpTT04ucGFyc2UodXNlckpzb24pOwogICAgICBjb25maWcuaGVhZGVyc1sndG9rZW4nXSA9IHVzZXIudG9rZW47IC8vIOiuvue9ruivt+axguWktAogICAgfQogIH0KCiAgcmV0dXJuIGNvbmZpZzsKfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTsKfSk7IC8vIHJlc3BvbnNlIOaLpuaIquWZqAovLyDlj6/ku6XlnKjmjqXlj6Plk43lupTlkI7nu5/kuIDlpITnkIbnu5PmnpwKCnJlcXVlc3QuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLnVzZShmdW5jdGlvbiAocmVzcG9uc2UpIHsKICB2YXIgcmVzID0gcmVzcG9uc2UuZGF0YTsgLy8g5aaC5p6c5piv6L+U5Zue55qE5paH5Lu2CgogIGlmIChyZXNwb25zZS5jb25maWcucmVzcG9uc2VUeXBlID09PSAnYmxvYicpIHsKICAgIHJldHVybiByZXM7CiAgfSAvLyDlhbzlrrnmnI3liqHnq6/ov5Tlm57nmoTlrZfnrKbkuLLmlbDmja4KCgogIGlmICh0eXBlb2YgcmVzID09PSAnc3RyaW5nJykgewogICAgcmVzID0gcmVzID8gSlNPTi5wYXJzZShyZXMpIDogcmVzOwogIH0gLy8g6aqM6K+BdG9rZW4KCgogIGlmIChyZXMuY29kZSA9PT0gJzQwMScpIHsKICAgIGNvbnNvbGUuZXJyb3IoInRva2Vu6L+H5pyf77yM6YeN5paw55m75b2VIik7CiAgICByb3V0ZXIucHVzaCgiL2xvZ2luIik7CiAgfQoKICByZXR1cm4gcmVzOwp9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICBjb25zb2xlLmxvZygnZXJyJyArIGVycm9yKTsgLy8gZm9yIGRlYnVnCgogIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7Cn0pOwpleHBvcnQgZGVmYXVsdCByZXF1ZXN0Ow=="},{"version":3,"sources":["/Users/liujiaming/Documents/LabPaperShare-main/vue/src/utils/request.js"],"names":["axios","router","config","baseUrl","process","env","NODE_ENV","dev","pro","request","create","baseURL","timeout","whiteUrls","interceptors","use","headers","userJson","sessionStorage","getItem","includes","url","push","user","JSON","parse","token","error","Promise","reject","response","res","data","responseType","code","console","log"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,IAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,GAAyCJ,MAAM,CAACC,OAAP,CAAeI,GAAxD,GAA8DL,MAAM,CAACC,OAAP,CAAeK,GAA7F;AACA,IAAMC,OAAO,GAAGT,KAAK,CAACU,MAAN,CAAa;AACzBC,EAAAA,OAAO,EAAE,MADgB;AAEzBC,EAAAA,OAAO,EAAE;AAFgB,CAAb,CAAhB,C,CAKA;;AACA,IAAMC,SAAS,GAAG,CAAC,GAAD,CAAlB,C,CAEA;AACA;AACA;;AACAJ,OAAO,CAACK,YAAR,CAAqBL,OAArB,CAA6BM,GAA7B,CAAiC,UAAAb,MAAM,EAAI;AACvCA,EAAAA,MAAM,CAACc,OAAP,CAAe,cAAf,IAAiC,gCAAjC,CADuC,CAGvC;;AACA,MAAIC,QAAQ,GAAGC,cAAc,CAACC,OAAf,CAAuB,MAAvB,CAAf;;AACA,MAAI,CAACN,SAAS,CAACO,QAAV,CAAmBlB,MAAM,CAACmB,GAA1B,CAAL,EAAqC;AAAG;AACpC,QAAG,CAACJ,QAAJ,EAAc;AACVhB,MAAAA,MAAM,CAACqB,IAAP,CAAY,QAAZ;AACH,KAFD,MAEO;AACH,UAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWR,QAAX,CAAX;AACAf,MAAAA,MAAM,CAACc,OAAP,CAAe,OAAf,IAA0BO,IAAI,CAACG,KAA/B,CAFG,CAEoC;AAC1C;AACJ;;AACD,SAAOxB,MAAP;AACH,CAdD,EAcG,UAAAyB,KAAK,EAAI;AACR,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAhBD,E,CAkBA;AACA;;AACAlB,OAAO,CAACK,YAAR,CAAqBgB,QAArB,CAA8Bf,GAA9B,CACI,UAAAe,QAAQ,EAAI;AACR,MAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAnB,CADQ,CAER;;AACA,MAAIF,QAAQ,CAAC5B,MAAT,CAAgB+B,YAAhB,KAAiC,MAArC,EAA6C;AACzC,WAAOF,GAAP;AACH,GALO,CAMR;;;AACA,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AACzBA,IAAAA,GAAG,GAAGA,GAAG,GAAGP,IAAI,CAACC,KAAL,CAAWM,GAAX,CAAH,GAAqBA,GAA9B;AACH,GATO,CAUR;;;AACA,MAAIA,GAAG,CAACG,IAAJ,KAAa,KAAjB,EAAwB;AACpBC,IAAAA,OAAO,CAACR,KAAR,CAAc,cAAd;AACA1B,IAAAA,MAAM,CAACqB,IAAP,CAAY,QAAZ;AACH;;AACD,SAAOS,GAAP;AACH,CAjBL,EAkBI,UAAAJ,KAAK,EAAI;AACLQ,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAQT,KAApB,EADK,CACsB;;AAC3B,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CArBL;AAyBA,eAAelB,OAAf","sourcesContent":["import axios from 'axios'\nimport router from \"@/router\";\nimport config from \"../config\"\n\nconst baseUrl = process.env.NODE_ENV === 'development' ? config.baseUrl.dev : config.baseUrl.pro\nconst request = axios.create({\n    baseURL: \"/api\",\n    timeout: 5000\n})\n\n// 请求白名单，如果请求在白名单里面，将不会被拦截校验权限\nconst whiteUrls = [\"/\", ]\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';\n\n    // 取出sessionStorage里面缓存的用户信息\n    let userJson = sessionStorage.getItem(\"user\")\n    if (!whiteUrls.includes(config.url)) {  // 校验请求白名单\n        if(!userJson) {\n            router.push(\"/login\")\n        } else {\n            let user = JSON.parse(userJson);\n            config.headers['token'] = user.token;  // 设置请求头\n        }\n    }\n    return config\n}, error => {\n    return Promise.reject(error)\n});\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(\n    response => {\n        let res = response.data;\n        // 如果是返回的文件\n        if (response.config.responseType === 'blob') {\n            return res\n        }\n        // 兼容服务端返回的字符串数据\n        if (typeof res === 'string') {\n            res = res ? JSON.parse(res) : res\n        }\n        // 验证token\n        if (res.code === '401') {\n            console.error(\"token过期，重新登录\")\n            router.push(\"/login\")\n        }\n        return res;\n    },\n    error => {\n        console.log('err' + error) // for debug\n        return Promise.reject(error)\n    }\n)\n\n\nexport default request\n\n"]}]}