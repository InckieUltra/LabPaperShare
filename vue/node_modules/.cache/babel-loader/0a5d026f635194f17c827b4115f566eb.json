{"remainingRequest":"C:\\Users\\许伟豪.DESKTOP-1DJ6SRT\\IdeaProjects\\LabPaperShare7\\vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\许伟豪.DESKTOP-1DJ6SRT\\IdeaProjects\\LabPaperShare7\\vue\\src\\utils\\request.js","dependencies":[{"path":"C:\\Users\\许伟豪.DESKTOP-1DJ6SRT\\IdeaProjects\\LabPaperShare7\\vue\\src\\utils\\request.js","mtime":1654995177928},{"path":"C:\\Users\\许伟豪.DESKTOP-1DJ6SRT\\IdeaProjects\\LabPaperShare7\\vue\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1654995140312},{"path":"C:\\Users\\许伟豪.DESKTOP-1DJ6SRT\\IdeaProjects\\LabPaperShare7\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1654995144208}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsKaW1wb3J0IHJvdXRlciBmcm9tICJAL3JvdXRlciI7CmltcG9ydCBjb25maWcgZnJvbSAiLi4vY29uZmlnIjsKdmFyIGJhc2VVcmwgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IGNvbmZpZy5iYXNlVXJsLmRldiA6IGNvbmZpZy5iYXNlVXJsLnBybzsKdmFyIHJlcXVlc3QgPSBheGlvcy5jcmVhdGUoewogIC8vYmFzZVVSTDogIi9hcGkiLAogIHRpbWVvdXQ6IDEwMDAwCn0pOyAvLyDor7fmsYLnmb3lkI3ljZXvvIzlpoLmnpzor7fmsYLlnKjnmb3lkI3ljZXph4zpnaLvvIzlsIbkuI3kvJrooqvmi6bmiKrmoKHpqozmnYPpmZAKCnZhciB3aGl0ZVVybHMgPSBbIi9hcGkvbG9naW4iLCAnL2FwaS9yZWdpc3RlcicsICcvYXBpL3JlZ2lzdGVyL3NlbmRlbWFpbCddOyAvLyByZXF1ZXN0IOaLpuaIquWZqAovLyDlj6/ku6Xoh6ror7fmsYLlj5HpgIHliY3lr7nor7fmsYLlgZrkuIDkupvlpITnkIYKLy8g5q+U5aaC57uf5LiA5YqgdG9rZW7vvIzlr7nor7fmsYLlj4LmlbDnu5/kuIDliqDlr4YKCnJlcXVlc3QuaW50ZXJjZXB0b3JzLnJlcXVlc3QudXNlKGZ1bmN0aW9uIChjb25maWcpIHsKICBjb25zb2xlLmxvZygi5oum5oiq5ZmoMSIpOyAvLyDlj5blh7pzZXNzaW9uU3RvcmFnZemHjOmdoue8k+WtmOeahOeUqOaIt+S/oeaBrwoKICB2YXIgdXNlckpzb24gPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCJ1c2VyIik7CgogIGlmICghd2hpdGVVcmxzLmluY2x1ZGVzKGNvbmZpZy51cmwpKSB7CiAgICBpZiAoIXVzZXJKc29uKSB7CiAgICAgIHJvdXRlci5wdXNoKCIvbG9naW4iKTsKICAgIH0gZWxzZSB7CiAgICAgIHZhciB1c2VyID0gSlNPTi5wYXJzZSh1c2VySnNvbik7CiAgICAgIGNvbmZpZy5oZWFkZXJzWyd0b2tlbiddID0gdXNlci50b2tlbjsgLy8g6K6+572u6K+35rGC5aS0CiAgICB9CiAgfQoKICByZXR1cm4gY29uZmlnOwp9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpOwp9KTsgLy8gcmVzcG9uc2Ug5oum5oiq5ZmoCi8vIOWPr+S7peWcqOaOpeWPo+WTjeW6lOWQjue7n+S4gOWkhOeQhue7k+aenAoKcmVxdWVzdC5pbnRlcmNlcHRvcnMucmVzcG9uc2UudXNlKGZ1bmN0aW9uIChyZXNwb25zZSkgewogIHZhciByZXMgPSByZXNwb25zZS5kYXRhOyAvLyDlpoLmnpzmmK/ov5Tlm57nmoTmlofku7YKCiAgaWYgKHJlc3BvbnNlLmNvbmZpZy5yZXNwb25zZVR5cGUgPT09ICdibG9iJykgewogICAgcmV0dXJuIHJlczsKICB9IC8vIOWFvOWuueacjeWKoeerr+i/lOWbnueahOWtl+espuS4suaVsOaNrgoKCiAgaWYgKHR5cGVvZiByZXMgPT09ICdzdHJpbmcnKSB7CiAgICByZXMgPSByZXMgPyBKU09OLnBhcnNlKHJlcykgOiByZXM7CiAgfSAvLyDpqozor4F0b2tlbgoKCiAgaWYgKHJlcy5jb2RlID09PSAnNDAxJykgewogICAgY29uc29sZS5lcnJvcigidG9rZW7ov4fmnJ/vvIzph43mlrDnmbvlvZUiKTsKICAgIHJvdXRlci5wdXNoKCIvbG9naW4iKTsKICB9CgogIHJldHVybiByZXM7Cn0sIGZ1bmN0aW9uIChlcnJvcikgewogIGNvbnNvbGUubG9nKCdlcnInICsgZXJyb3IpOyAvLyBmb3IgZGVidWcKCiAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTsKfSk7CmV4cG9ydCBkZWZhdWx0IHJlcXVlc3Q7"},{"version":3,"sources":["C:/Users/许伟豪.DESKTOP-1DJ6SRT/IdeaProjects/LabPaperShare7/vue/src/utils/request.js"],"names":["axios","router","config","baseUrl","process","env","NODE_ENV","dev","pro","request","create","timeout","whiteUrls","interceptors","use","console","log","userJson","sessionStorage","getItem","includes","url","push","user","JSON","parse","headers","token","error","Promise","reject","response","res","data","responseType","code"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,IAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,GAAyCJ,MAAM,CAACC,OAAP,CAAeI,GAAxD,GAA8DL,MAAM,CAACC,OAAP,CAAeK,GAA7F;AACA,IAAMC,OAAO,GAAGT,KAAK,CAACU,MAAN,CAAa;AACzB;AACAC,EAAAA,OAAO,EAAE;AAFgB,CAAb,CAAhB,C,CAKA;;AACA,IAAMC,SAAS,GAAG,CAAC,YAAD,EAAe,eAAf,EAA+B,yBAA/B,CAAlB,C,CACA;AACA;AACA;;AACAH,OAAO,CAACI,YAAR,CAAqBJ,OAArB,CAA6BK,GAA7B,CAAiC,UAAAZ,MAAM,EAAI;AACvCa,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EADuC,CAEvC;;AACA,MAAIC,QAAQ,GAAGC,cAAc,CAACC,OAAf,CAAuB,MAAvB,CAAf;;AACA,MAAI,CAACP,SAAS,CAACQ,QAAV,CAAmBlB,MAAM,CAACmB,GAA1B,CAAL,EAAqC;AACjC,QAAI,CAACJ,QAAL,EAAe;AACXhB,MAAAA,MAAM,CAACqB,IAAP,CAAY,QAAZ;AACH,KAFD,MAEO;AACH,UAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWR,QAAX,CAAX;AACAf,MAAAA,MAAM,CAACwB,OAAP,CAAe,OAAf,IAA0BH,IAAI,CAACI,KAA/B,CAFG,CAEoC;AAC1C;AACJ;;AACD,SAAOzB,MAAP;AACH,CAbD,EAaG,UAAA0B,KAAK,EAAI;AACR,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAfD,E,CAgBA;AACA;;AACAnB,OAAO,CAACI,YAAR,CAAqBkB,QAArB,CAA8BjB,GAA9B,CACI,UAAAiB,QAAQ,EAAI;AACR,MAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAnB,CADQ,CAER;;AACA,MAAIF,QAAQ,CAAC7B,MAAT,CAAgBgC,YAAhB,KAAiC,MAArC,EAA6C;AACzC,WAAOF,GAAP;AACH,GALO,CAMR;;;AACA,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AACzBA,IAAAA,GAAG,GAAGA,GAAG,GAAGR,IAAI,CAACC,KAAL,CAAWO,GAAX,CAAH,GAAqBA,GAA9B;AACH,GATO,CAUR;;;AACA,MAAIA,GAAG,CAACG,IAAJ,KAAa,KAAjB,EAAwB;AACpBpB,IAAAA,OAAO,CAACa,KAAR,CAAc,cAAd;AACA3B,IAAAA,MAAM,CAACqB,IAAP,CAAY,QAAZ;AACH;;AACD,SAAOU,GAAP;AACH,CAjBL,EAkBI,UAAAJ,KAAK,EAAI;AACLb,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAQY,KAApB,EADK,CACsB;;AAC3B,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CArBL;AAuBA,eAAenB,OAAf","sourcesContent":["import axios from 'axios'\r\nimport router from \"@/router\";\r\nimport config from \"../config\"\r\n\r\nconst baseUrl = process.env.NODE_ENV === 'development' ? config.baseUrl.dev : config.baseUrl.pro\r\nconst request = axios.create({\r\n    //baseURL: \"/api\",\r\n    timeout: 10000\r\n})\r\n\r\n// 请求白名单，如果请求在白名单里面，将不会被拦截校验权限\r\nconst whiteUrls = [\"/api/login\", '/api/register','/api/register/sendemail']\r\n// request 拦截器\r\n// 可以自请求发送前对请求做一些处理\r\n// 比如统一加token，对请求参数统一加密\r\nrequest.interceptors.request.use(config => {\r\n    console.log(\"拦截器1\")\r\n    // 取出sessionStorage里面缓存的用户信息\r\n    let userJson = sessionStorage.getItem(\"user\")\r\n    if (!whiteUrls.includes(config.url)) {\r\n        if (!userJson) {\r\n            router.push(\"/login\")\r\n        } else {\r\n            let user = JSON.parse(userJson);\r\n            config.headers['token'] = user.token;  // 设置请求头\r\n        }\r\n    }\r\n    return config\r\n}, error => {\r\n    return Promise.reject(error)\r\n});\r\n// response 拦截器\r\n// 可以在接口响应后统一处理结果\r\nrequest.interceptors.response.use(\r\n    response => {\r\n        let res = response.data;\r\n        // 如果是返回的文件\r\n        if (response.config.responseType === 'blob') {\r\n            return res\r\n        }\r\n        // 兼容服务端返回的字符串数据\r\n        if (typeof res === 'string') {\r\n            res = res ? JSON.parse(res) : res\r\n        }\r\n        // 验证token\r\n        if (res.code === '401') {\r\n            console.error(\"token过期，重新登录\")\r\n            router.push(\"/login\")\r\n        }\r\n        return res;\r\n    },\r\n    error => {\r\n        console.log('err' + error) // for debug\r\n        return Promise.reject(error)\r\n    }\r\n)\r\nexport default request\r\n\r\n"]}]}