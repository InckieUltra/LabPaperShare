{"remainingRequest":"/Users/liujiaming/Documents/LabPaperShare-main/vue/node_modules/babel-loader/lib/index.js!/Users/liujiaming/Documents/LabPaperShare-main/vue/src/utils/request.js","dependencies":[{"path":"/Users/liujiaming/Documents/LabPaperShare-main/vue/src/utils/request.js","mtime":1651050523943},{"path":"/Users/liujiaming/Documents/LabPaperShare-main/vue/node_modules/cache-loader/dist/cjs.js","mtime":1650090877579},{"path":"/Users/liujiaming/Documents/LabPaperShare-main/vue/node_modules/babel-loader/lib/index.js","mtime":1650090878161}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7CmltcG9ydCByb3V0ZXIgZnJvbSAiQC9yb3V0ZXIiOwppbXBvcnQgY29uZmlnIGZyb20gIi4uL2NvbmZpZyI7CnZhciBiYXNlVXJsID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgPyBjb25maWcuYmFzZVVybC5kZXYgOiBjb25maWcuYmFzZVVybC5wcm87CnZhciByZXF1ZXN0ID0gYXhpb3MuY3JlYXRlKHsKICAvL2Jhc2VVUkw6ICIvYXBpIiwKICB0aW1lb3V0OiA1MDAwCn0pOyAvLyDor7fmsYLnmb3lkI3ljZXvvIzlpoLmnpzor7fmsYLlnKjnmb3lkI3ljZXph4zpnaLvvIzlsIbkuI3kvJrooqvmi6bmiKrmoKHpqozmnYPpmZAKCnZhciB3aGl0ZVVybHMgPSBbIi8iXTsgLy8gcmVzcG9uc2Ug5oum5oiq5ZmoCi8vIOWPr+S7peWcqOaOpeWPo+WTjeW6lOWQjue7n+S4gOWkhOeQhue7k+aenAoKcmVxdWVzdC5pbnRlcmNlcHRvcnMucmVzcG9uc2UudXNlKGZ1bmN0aW9uIChyZXNwb25zZSkgewogIHZhciByZXMgPSByZXNwb25zZS5kYXRhOyAvLyDlpoLmnpzmmK/ov5Tlm57nmoTmlofku7YKCiAgaWYgKHJlc3BvbnNlLmNvbmZpZy5yZXNwb25zZVR5cGUgPT09ICdibG9iJykgewogICAgcmV0dXJuIHJlczsKICB9IC8vIOWFvOWuueacjeWKoeerr+i/lOWbnueahOWtl+espuS4suaVsOaNrgoKCiAgaWYgKHR5cGVvZiByZXMgPT09ICdzdHJpbmcnKSB7CiAgICByZXMgPSByZXMgPyBKU09OLnBhcnNlKHJlcykgOiByZXM7CiAgfSAvLyDpqozor4F0b2tlbgoKCiAgaWYgKHJlcy5jb2RlID09PSAnNDAxJykgewogICAgY29uc29sZS5lcnJvcigidG9rZW7ov4fmnJ/vvIzph43mlrDnmbvlvZUiKTsKICAgIHJvdXRlci5wdXNoKCIvbG9naW4iKTsKICB9CgogIHJldHVybiByZXM7Cn0sIGZ1bmN0aW9uIChlcnJvcikgewogIGNvbnNvbGUubG9nKCdlcnInICsgZXJyb3IpOyAvLyBmb3IgZGVidWcKCiAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTsKfSk7CmV4cG9ydCBkZWZhdWx0IHJlcXVlc3Q7"},{"version":3,"sources":["/Users/liujiaming/Documents/LabPaperShare-main/vue/src/utils/request.js"],"names":["axios","router","config","baseUrl","process","env","NODE_ENV","dev","pro","request","create","timeout","whiteUrls","interceptors","response","use","res","data","responseType","JSON","parse","code","console","error","push","log","Promise","reject"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,IAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,GAAyCJ,MAAM,CAACC,OAAP,CAAeI,GAAxD,GAA8DL,MAAM,CAACC,OAAP,CAAeK,GAA7F;AACA,IAAMC,OAAO,GAAGT,KAAK,CAACU,MAAN,CAAa;AACzB;AACAC,EAAAA,OAAO,EAAE;AAFgB,CAAb,CAAhB,C,CAKA;;AACA,IAAMC,SAAS,GAAG,CAAC,GAAD,CAAlB,C,CAEA;AACA;;AACAH,OAAO,CAACI,YAAR,CAAqBC,QAArB,CAA8BC,GAA9B,CACI,UAAAD,QAAQ,EAAI;AACR,MAAIE,GAAG,GAAGF,QAAQ,CAACG,IAAnB,CADQ,CAER;;AACA,MAAIH,QAAQ,CAACZ,MAAT,CAAgBgB,YAAhB,KAAiC,MAArC,EAA6C;AACzC,WAAOF,GAAP;AACH,GALO,CAMR;;;AACA,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AACzBA,IAAAA,GAAG,GAAGA,GAAG,GAAGG,IAAI,CAACC,KAAL,CAAWJ,GAAX,CAAH,GAAqBA,GAA9B;AACH,GATO,CAUR;;;AACA,MAAIA,GAAG,CAACK,IAAJ,KAAa,KAAjB,EAAwB;AACpBC,IAAAA,OAAO,CAACC,KAAR,CAAc,cAAd;AACAtB,IAAAA,MAAM,CAACuB,IAAP,CAAY,QAAZ;AACH;;AACD,SAAOR,GAAP;AACH,CAjBL,EAkBI,UAAAO,KAAK,EAAI;AACLD,EAAAA,OAAO,CAACG,GAAR,CAAY,QAAQF,KAApB,EADK,CACsB;;AAC3B,SAAOG,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH,CArBL;AAuBA,eAAed,OAAf","sourcesContent":["import axios from 'axios'\nimport router from \"@/router\";\nimport config from \"../config\"\n\nconst baseUrl = process.env.NODE_ENV === 'development' ? config.baseUrl.dev : config.baseUrl.pro\nconst request = axios.create({\n    //baseURL: \"/api\",\n    timeout: 5000\n})\n\n// 请求白名单，如果请求在白名单里面，将不会被拦截校验权限\nconst whiteUrls = [\"/\", ]\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(\n    response => {\n        let res = response.data;\n        // 如果是返回的文件\n        if (response.config.responseType === 'blob') {\n            return res\n        }\n        // 兼容服务端返回的字符串数据\n        if (typeof res === 'string') {\n            res = res ? JSON.parse(res) : res\n        }\n        // 验证token\n        if (res.code === '401') {\n            console.error(\"token过期，重新登录\")\n            router.push(\"/login\")\n        }\n        return res;\n    },\n    error => {\n        console.log('err' + error) // for debug\n        return Promise.reject(error)\n    }\n)\nexport default request\n\n"]}]}